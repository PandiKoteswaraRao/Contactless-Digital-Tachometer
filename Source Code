#include <16F877a.h>
#include <stdlib.h>

#use delay(clock=20000000)
#fuses HS,NOWDT,NOPROTECT,NOBROWNOUT,NOPUT

int32 count;
int8 countt;



#define PORT_D                  3 

#define NCHAR_PER_LINE          16              // max char numbers per line 
#define LCD_RS                  PIN_B4 
#define LCD_E                   PIN_B2 
#define LCD_DAT                 PORT_D 
//char LINE2[15];
 int i;

///////////////////////////////////////////////// output() 
//lcd data bus output 
void output(int8 port, int8 dat) 
{ 
                output_D(dat);      
}//end output() 

//////////////////////////////////////////////// lcd_write_cmd() 
// 
void lcd_write_cmd(int8 cmd) 
{ 
         delay_us(400); 
        output_low(LCD_RS); 
        output(LCD_DAT, cmd); 

        output_high(LCD_E); 
        delay_us(400); 
        output_low(LCD_E); 
   ////getc();   
}//end lcd_write_cmd() 

// lcd_write_dat() 
// 
void lcd_write_dat(int8 dat) 
{ 
         delay_us(400); 
        output_high(LCD_RS); 
        output(LCD_DAT, dat); 

        output_high(LCD_E); 
        delay_us(400); 
        output_low(LCD_E); 
  
}//end lcd_write_dat() 

//////////////////////////////////////////// lcd_init() 
// 
void lcd_init(void) 
{ 
        output_low(LCD_E);              // Let LCD E line low 

        lcd_write_cmd(0x38);            // LCD 16x2, 5x7, 8bits data 
        delay_ms(15); 
        lcd_write_cmd(0x01);            // Clear LCD display 
        delay_ms(10); 
        lcd_write_cmd(0x0f);            // Open display & current 
        delay_ms(10); 
        lcd_write_cmd(0x06);            // Window fixed 
        delay_ms(10); 
}//end lcd_init() 


///////////////////////////////////////// lcd_display_char() 
// 
void lcd_display_char(int8 line, int8 pos, int8 ch) 
{ 
        int8 tmp; 
        line = (line==0) ? 0 : 1; 
        pos  = (pos >NCHAR_PER_LINE) ? NCHAR_PER_LINE : pos; 

        tmp = 0x80 + 0x40*line + pos; 
   //printf("tmp=%xReady?\n\r",tmp);
   //printf("ch=%xReady?\n\r",ch);

   ////getc();
        lcd_write_cmd(tmp); 
        lcd_write_dat(ch); 
   //delay_ms(40); //delay removed
}//end lcd_display_char() 

/////////////////////////////////////////// lcd_display_str() 
// 
void lcd_display_str(int8 line, char str[]) 
{ 
     int8 i; 

        for(i=0; i<NCHAR_PER_LINE; i++) 
            { 
                lcd_display_char(line, i, ' '); 
                } 
        for(i=0; i<NCHAR_PER_LINE; i++) 
                { 
                if(str[i] == '\0') break; 
                lcd_display_char(line, i, str[i]); 
                } 
   delay_ms(500);
}//end lcd_display_str() 
void lcd_disp()
 {
  char b[16];
   char  LINE2[16] ="Tachometer cps:";
  count=0;
 
 countt=get_timer1();
     count=countt*10;
       //count=1234;
       lcd_init();
      
   itoa(count,10,b);
       /* for(i=0; i<NCHAR_PER_LINE; i++) 
                { 
                       (0, i, '0'+i);
                   } */
      lcd_display_str(0,b);
     lcd_display_str(1, LINE2); 
   delay_ms(1000);  
     setup_timer_1 ( T1_EXTERNAL| T1_DIV_BY_1);
     set_timer1(0);
   setup_timer_2 ( T2_DIV_BY_16,250,8);
   

 }

#INT_TIMER2

void timer_Interrupt2()
{
//countt=get_timer1();
setup_timer_1 ( T1_DISABLED | T1_DIV_BY_8);
//set_timer_1(62500);
setup_timer_2 ( T2_DISABLED,255,1);
lcd_disp();
}

void main(void){
enable_interrupts(GLOBAL);
enable_interrupts(INT_TIMER1);
enable_interrupts(INT_TIMER2);
setup_timer_1 ( T1_EXTERNAL| T1_DIV_BY_1);
setup_timer_2 ( T2_DIV_BY_16,250,8);


while(1);
}
